TLuna项目：
Version 0.4.3

====================== Release Note =================================================
0.5
1、所有项目对应windows x64平台编译，根据平台调整类型定义
2、引擎以及示例相关代码转换为utf8格式
3、项目升级为vs2015
4、TLunaEditor部分功能移动到EngineDemo中，去掉TLunaEditor项目
5、版本管理切换为Git
6、EngineDemo运行参数修改为，-editor执行编辑器，-initfile [filename]指定初始化脚本文件
7、添加配置宏定义选项
8、修改引擎中的类型使用，全部使用自定义类型
9、取消使用stl模板类型，全部使用自定义类型
10、添加控制台输入输出接口，示例部分添加控制台界面，增加控制台输入输出功能
11、修改日志类接口，可以同时输出到文件，控制台，系统控制台

0.4.3
1、添加TColorValue类，处理颜色
2、修改TFPU函数问题
3、增加TVector3的功能接口
4、增加TMathUtils功能接口
5、修改TAABBBox类名称
6、修改头文件编译删选，使用#ifndef格式
7、统一规范文件名
8、去掉预编译头文件，修改全局定义位置
9、输入控制移动到游戏层，在引擎中不判断鼠标和键盘
10、合并ExampleEditor和EngineDemo，统一入口
11、去掉一些使用WIN32类型的地方
12、添加右手坐标系的矩阵构造等，为右手坐标系支持做准备，添加构建平面反射矩阵
13、平面，三角形，AABB，裁剪以及相交相关算法
14、统一规范类名称
#14、添加WINDOW窗口类

0.4.2
1、FONT改用大Cache，大纹理缓冲
2、增加TXT文本写入类
3、增加二进制文件读取写入类
4、修改XML库为tinyxml
5、修改数学库相关，加入OGRE的一些位运算，增加计算切向量的方法
6、完善TString类，增加short类型的相关转换
7、完善TXT和二进制文件读写接口，增加long和short类型支持
8、增加Matrix3x3距离类
9、增加SimpleSpline类
10、增加RotationalSpline类
11、FPU添加三角函数等
12、增加角度处理类Radian和Degree
13、增加DualQuaternion四元数
14、增加PlaneBoundedVolume类
15、增加Polygon类
16、增加ConvexBody类
17、修改其它数学库接口
18、升级至VS2013

0.4.1
1、改为DX11渲染
2、修改引擎组织架构
3、增加专用DDS读取库
4、TLImage专用处理纹理组件

0.4.0
1、修改生成目录
2、修改结构
3、去掉关于GUIScene设计，全部改为GUISceneMgr统一处理，今后以Container为单位处理逻辑
4、修改initapp.lua位置，变为EXE相同目录下
5、GUI初始化字体，纹理路径不再需要设置资源跟路径，代码里面会自动添加
6、添加多线程锁支持
7、添加wxWidgets
8、添加LunaEditor工程，编辑器基础部分搭建完成
9、添加ExampleEditor工程，用于启动编辑器
10、改为unicode编码
11、添加引用计数的智能指针
12、渲染部分改造，使用D3D11
13、TString浅拷贝
14、TString对wchar_t的支持

0.3.4
1、修改TLoopCtrl时间控制计算
2、使用Visual Studio 2012编译
3、D3D10版本使用VS2012新SDK
4、使用MAX2013SDK编译MAX工具
5、修改FreeImage的使用

0.3.3
1、修改FreeType初始化流程

0.3.2
1、添加编译FX的程序
2、读取Effect使用编译出的fxo文件
3、开始使用FreeImage读取图片文件
4、去掉对于D3DX的依赖

0.1.6 --> 0.2.0
1、导出插件改为3DSMAX2011版
2、DirectX库改为9.29.1962.0，即2010年6月版
3、3DMAX只导出diffuse材质

0.1.5 --> 0.1.6
1、修改导出插件，不再使用IGame接口导出纹理坐标，使用max的mesh导出
2、导出插件，顶点动画支持纹理UV动画
3、导出插件，顶点动画导出支持多MESH
4、可以画出全部存在MESH文件中的模型
5、顶点动画导出修改，支持多MESH处理，MESH必须与模型文件中的MESH一一对应

// -------------------------------------------- 开发环境 ---------------------------------------------------

开发IDE: Microsoft Visual Studio 2012
开发操作系统: Microsoft Windows 8

依赖外部库：
FreeImage -- 图片资源库 3.15.1
FreeType -- 文字渲染库 2.1.9
lua -- lua script
xerces -- xml library
zlib -- zlib library
3DMax 2013 SDK -- 3DMAX开发包
LibDDSTextureLoader -- DX示例的代码，读取DDS

// ---------------------------------------------------- 项目介绍 --------------------------------------------

maxProject1项目：
3DMax2011插件，可以导出TMesh

compileFx项目：
HLSL代码编译工具

LunaEngine项目：
数学部分
TLFPU.h:全局处理函数
TLMathUtils.h:全局函数
Vector4<T>:4d向量
Vector3<T>:3d向量
Vector2<T>:2d向量
Matrix3x3<T>:3X3矩阵
Matrix4x4<T>:4X4矩阵
Ray<T>:射线类
Radian<T>:弧度
Degree<T>:角度
Line<T>:线段类
Triangle<T>:三角形
Plane<T>:平面
PlaneBoundedVolume<T>:平面围成的体积
Polygon<T>:多边形
AABBbox<T>:AABB包围盒
Sphere<T>:包围球
Quaternion<T>:四元数类
DualQuaternion<T>:双四元数
RotationalSpline<T>:旋转样条曲线
SimpleSpline<T>:样条曲线
ConvexBody<T>:凸面体
注:
1、所有TMath涉及到的坐标系,均以左手坐标系为准(X向右,Y向上,Z向里)
2、所有向量为横向量,3D向量点W=1,射线W=0
4、角度均以逆时针为正,默认范围0-360度,沿坐标轴正方向为0度
5、所有对外接口的角度必须使用角度,在内部转成弧度
6、没有向量*矩阵的直接重载,需要调用转换函数才能转换向量
7、矩阵对向量的转换在TMatrix4x4<T>中
8、其它图元的转换均放在自己的类里实现

内存部分
Map<T>:一个<Key,Value>对的链表
List<T>:一个双向链表
注意:今后在设计到以上内存数据结构的时候,尽量使用这些结构,或者STL的结构,不要自己再另外做处理了

其它基本处理
ConfigFile:简单的值对文件操作类
MemFile:内存文件映射
Log:日志系统
TxtFileReader:用于读取TXT文本文件的数据
TxtFileWritter:用于写入TXT文本文件的数据
DateTime:日期时间操作
AutoPtr<T>:智能指针
String:字符串类
Singleton<T>:单例模式,需要子类继承使用
TLCommonTypeDef.h -- 定义一些基本
TLConfigDef.h -- 全局配置定义
TLCommonFunc.h -- 全局函数
SharePtr<T>：引用计数智能指针
Mutex：互斥信号
Lock：互斥锁
BinaryFileProcessor -- 二进制文件读写处理
Console -- 控制台系统
ConsoleInput -- 处理控制台输入
ConsoleOutput -- 处理控制台输出

关于压缩
Dependence:zlib,1.2.3
Dependence:tbase
TZip:压缩和解压缩相关操作
TZip压缩后文件格式:
OrigSize<int> 压缩之前的文件总大小,用于制造缓冲区
-->FileNum<int> 文件总数
{
-->NameSize<int> 文件名长度
-->Name<char[]> 文件名(不包括原始路径)
-->ContentSize<int> 内容大小(字节)
-->Content<byte[]> 文件内容
}
注:-->表示是压缩之后的数据,<>表示空间大小

lua脚本部分
Dependence:lua,5.1
LuaBase:Lua脚本解析基础类

XML部分
请直接使用tinyxml处理xml文档

引擎逻辑部分
TLGlobleFunc.h -- 提供全局对外接口
TLGUIDefine.h -- 定义GUI相关
TestTriangle -- 测试用三角形
ResMgr -- 资源加载释放管理
ResObject -- 资源物体，物体公共接口
LoopCtrl -- 时间控制类
GUIFont -- 字体类
GUIFontManager -- 字体管理类，统一字体对外接口
GUITextureMgr -- UI纹理管理类，负责纹理渲染
GUIMgr -- UI控件统一管理
GUIContainer -- UI容器类
GUICtrl -- UI控件类
GUIPicture -- 图片类控件
GUIText -- 文字类控件
GlobleClass -- 存储全局变量和方法
GUIListener -- 消息传递接口，只提供函数定义
Timer -- 时间计算
Image -- 处理纹理类

渲染部分
RenderMgr -- 负责统一管理渲染器
RenderDevice -- 渲染器接口
RenderDeviceUsed... -- 包括子接口，用于处理各种渲染硬件使用的东西
..._D3D11 -- D3D11的实现

EngineDemo项目：
EditorMgr -- Editor用统一管理类
EditorMainFrame -- Editor用主窗口
EditorApp -- wxWidget的入口
ConfigDef.h -- 全局配置定义
KeyCodeDef.h -- 定义虚拟键值
GameInput -- 使用DInput封装接口，处理键盘，鼠标，手柄输入
GameMain -- 全局函数
LuaInitApp -- 初始化脚本接口
MainWindow -- 主窗口
GUISceneMgr -- GUI场景管理
InputMsgMgr -- 统一处理输入消息

====================== 目录说明 =====================================================
文件索引：
demores -- TLuna 新版引擎DEMO用资源
doc -- 开发项目相关文档
lunaengine -- TLuna 新版引擎相关代码
bin -- 生成目录
lib -- 依赖库生成目录
Intermediate -- 中间文件目录

demores：需要在配置文件里面写好此文件夹地址，表示资源根目录
config：各种配置文件
gui：UI相关文件
script：LUA脚本
shader：HLSL EFFECT文件
texture：纹理文件
model：模型文件
map：地图文件

====================== 运行示例程序 =================================================
EngineDemo运行参数
-editor执行编辑器
-initfile [filename]指定初始化脚本文件，默认为运行目录中的initApp.lua

====================== 测试数据 =====================================================
pentium D 2.0GHz  7300GT  最高尽200fps		潘
athlon 64 x2 2.0GHz  7300LE 最高尽70fps		时
athlon 64 x2 2.0GHz  x1950Pro 最高尽500fps	家
pentium D 3.0GHz  GMA3000  最高尽70fps		自

结论
CPU的性能不是最关键的，但还是有一定作用，可以看出a64x2 2.0G 和 pD 3.0G 的性能相当
GPU的性能是关键，主要差别是显存位宽，渲染管线的数量，可以看出7300LE 和 GMA3000 的性能相当，后者是一款集成显卡